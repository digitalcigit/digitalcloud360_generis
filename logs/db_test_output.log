============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /app
configfile: pytest.ini
plugins: mock-3.14.1, Faker-37.5.3, langsmith-0.4.15, anyio-4.10.0, asyncio-1.1.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 1 item

tests/test_db.py F

=================================== FAILURES ===================================
___________________________ test_database_connection ___________________________

    @pytest.mark.asyncio
    async def test_database_connection():
        """
        Tests the basic connectivity to the test database.
        """
        test_db_url = os.getenv("TEST_DATABASE_URL")
        assert test_db_url, "TEST_DATABASE_URL environment variable not set"
    
        engine = create_async_engine(test_db_url, echo=True)
        async_session = sessionmaker(
            bind=engine, class_=AsyncSession, expire_on_commit=False
        )
    
        try:
            async with async_session() as session:
>               await session.execute("SELECT 1")

tests/test_db.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/session.py:463: in execute
    result = await greenlet_spawn(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2149: in _execute_internal
    statement = coercions.expect(roles.StatementRole, statement)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/coercions.py:395: in expect
    resolved = impl._literal_coercion(
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/coercions.py:621: in _literal_coercion
    return self._text_coercion(element, argname, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/coercions.py:614: in _text_coercion
    return _no_text_coercion(element, argname)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

element = 'SELECT 1', argname = None
exc_cls = <class 'sqlalchemy.exc.ArgumentError'>, extra = None, err = None

    def _no_text_coercion(
        element: Any,
        argname: Optional[str] = None,
        exc_cls: Type[exc.SQLAlchemyError] = exc.ArgumentError,
        extra: Optional[str] = None,
        err: Optional[Exception] = None,
    ) -> NoReturn:
>       raise exc_cls(
            "%(extra)sTextual SQL expression %(expr)r %(argname)sshould be "
            "explicitly declared as text(%(expr)r)"
            % {
                "expr": util.ellipses_string(element),
                "argname": "for argument %s" % (argname,) if argname else "",
                "extra": "%s " % extra if extra else "",
            }
        ) from err
E       sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT 1' should be explicitly declared as text('SELECT 1')

/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/coercions.py:584: ArgumentError

During handling of the above exception, another exception occurred:

    @pytest.mark.asyncio
    async def test_database_connection():
        """
        Tests the basic connectivity to the test database.
        """
        test_db_url = os.getenv("TEST_DATABASE_URL")
        assert test_db_url, "TEST_DATABASE_URL environment variable not set"
    
        engine = create_async_engine(test_db_url, echo=True)
        async_session = sessionmaker(
            bind=engine, class_=AsyncSession, expire_on_commit=False
        )
    
        try:
            async with async_session() as session:
                await session.execute("SELECT 1")
            assert True
        except Exception as e:
>           pytest.fail(f"Database connection failed: {e}")
E           Failed: Database connection failed: Textual SQL expression 'SELECT 1' should be explicitly declared as text('SELECT 1')

tests/test_db.py:24: Failed
=============================== warnings summary ===============================
../usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

../usr/local/lib/python3.11/site-packages/passlib/utils/__init__.py:854
  /usr/local/lib/python3.11/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_db.py::test_database_connection - Failed: Database connecti...
======================== 1 failed, 3 warnings in 1.60s =========================
